// <template>
// <div id="app">
//   <svg ref="nodeMap" width="100%" height="100vh"></svg>
// </div>
// </template>

// <script>
// import * as d3 from "d3";

// export default {
// name: "NodeMap",
// data() {
//   return {
//     nodes: [],
//     simulation: null,
//     linkColors: {
//       "Node 1": "purple",
//       "Node 2": "blue",
//       "Node 3": "green",
//       "Node 4": "orange",
//       "Node 5": "red",
//     },
//   };
// },
// mounted() {
//   this.createNodeMap();
// },
// methods: {
//   createNodeMap() {
//     const nodes = [
//       { id: "Node 1", type: "main", x: 200, y: 200 },
//       { id: "Node 2", type: "main", x: 600, y: 200 },
//       { id: "Node 3", type: "main", x: 200, y: 600 },
//       { id: "Node 4", type: "main", x: 600, y: 600 },
//       { id: "Node 5", type: "main", x: 400, y: 400 },
//       ...Array.from({ length: 5 }, (_, i) =>
//         Array.from({ length: 4 }, (_, j) => ({
//           id: `node${i + 1}-${String.fromCharCode(97 + j)}`,
//           type: "sub",
//           parent: `Node ${i + 1}`,
//         }))
//       ).flat(),
//     ];

//     const links = [
//       ...nodes.filter(d => d.type === "sub").map(subNode => ({
//         source: subNode.parent,
//         target: subNode.id,
//       })),
//       { source: "Node 1", target: "Node 2" },
//       { source: "Node 2", target: "Node 4" },
//       { source: "Node 4", target: "Node 3" },
//       { source: "Node 3", target: "Node 1" },
//       { source: "Node 5", target: "Node 1" },
//       { source: "Node 5", target: "Node 2" },
//       { source: "Node 5", target: "Node 3" },
//       { source: "Node 5", target: "Node 4" },
//     ];

//     const width = window.innerWidth;
//     const height = window.innerHeight;

//     const svg = d3.select(this.$refs.nodeMap);

//     this.nodes = nodes;

//     this.simulation = d3
//       .forceSimulation(nodes)
//       .force(
//         "link",
//         d3
//           .forceLink(links)
//           .id(d => d.id)
//           .distance(120)
//       )
//       .force("charge", d3.forceManyBody().strength(-800))
//       .force("center", d3.forceCenter(width / 2, height / 2));

//     const link = svg
//       .append("g")
//       .attr("class", "links")
//       .selectAll("line")
//       .data(links)
//       .join("line")
//       .attr("class", "link")
//       .style("stroke", d => this.linkColors[d.source.id])
//       .style("stroke-width", 1.5);

//     const node = svg
//       .append("g")
//       .attr("class", "nodes")
//       .selectAll("circle")
//       .data(nodes)
//       .join("circle")
//       .attr("r", d => (d.type === "main" ? 20 : 10))
//       .attr("class", d => (d.type === "main" ? "main-node" : "sub-node"))
//       .style("fill", d => (d.type === "main" ? "skyblue" : "orange"))
//       .call(
//         d3
//           .drag()
//           .on("start", this.dragStarted)
//           .on("drag", this.dragged)
//           .on("end", this.dragEnded)
//       )
//       .on("mouseover", this.handleNodeHoverIn)
//       .on("mouseout", this.handleNodeHoverOut)
//       .on("click", this.handleNodeClick);

//     // Updated to ensure correct white text color
//     const labels = svg
//       .append("g")
//       .attr("class", "labels")
//       .selectAll("text")
//       .data(nodes)
//       .join("text")
//       .attr("class", "node-text")
//       .attr("text-anchor", "start") // Align text to the left
//       .attr("dy", 4)
//       .attr("x", d => d.x + (d.type === "main" ? 30 : 20))
//       .attr("y", d => d.y)
//       .text(d => d.id);

//     // White text color should now be applied correctly
//     labels.style("fill", "white"); // Ensuring the text is white here

//     this.simulation.on("tick", () => {
//       link
//         .attr("x1", d => d.source.x)
//         .attr("y1", d => d.source.y)
//         .attr("x2", d => d.target.x)
//         .attr("y2", d => d.target.y);

//       node.attr("cx", d => d.x).attr("cy", d => d.y);
//       labels.attr("x", d => d.x + (d.type === "main" ? 30 : 20)).attr("y", d => d.y);
//     });
//   },

//   dragStarted(event, d) {
//     if (!event.active) this.simulation.alphaTarget(0.3).restart();
//     d.fx = d.x;
//     d.fy = d.y;
//   },

//   dragged(event, d) {
//     d.fx = event.x;
//     d.fy = event.y;
//   },

//   dragEnded(event, d) {
//     if (!event.active) this.simulation.alphaTarget(0);
//     d.fx = null;
//     d.fy = null;
//   },

//   handleNodeClick(event, d) {
//     if (d.type === "main") {
//       const connectedNodes = new Set(
//         this.nodes.filter(n => n.parent === d.id || n.id === d.id).map(n => n.id)
//       );

//       d3.selectAll(".node")
//         .classed("blurred", n => !connectedNodes.has(n.id));

//       d3.selectAll(".link")
//         .classed(
//           "blurred",
//           l =>
//             !connectedNodes.has(l.source.id) || !connectedNodes.has(l.target.id)
//         );
//     }
//   },

//   handleNodeHoverIn(event, d) {
//     if (d.type === "main") {
//       const connectedNodes = new Set(
//         this.nodes.filter(n => n.parent === d.id || n.id === d.id).map(n => n.id)
//       );

//       d3.selectAll(".node")
//         .style("opacity", n => (connectedNodes.has(n.id) ? 1 : 0.3))
//         .style("filter", n => (connectedNodes.has(n.id) ? "none" : "blur(4px)"));

//       d3.selectAll(".link")
//         .style("opacity", l =>
//           (connectedNodes.has(l.source.id) && connectedNodes.has(l.target.id)) ? 1 : 0.3);

//       d3.selectAll(".node-text")
//         .style("opacity", n => (connectedNodes.has(n.id) ? 1 : 0.3))
//         .style("filter", n => (connectedNodes.has(n.id) ? "none" : "blur(4px)"));
//     }
//   },

//   handleNodeHoverOut() {
//     d3.selectAll(".node")
//       .style("opacity", 1)
//       .style("filter", "none");

//     d3.selectAll(".link")
//       .style("opacity", 1);

//     d3.selectAll(".node-text")
//       .style("opacity", 1)
//       .style("filter", "none");
//   },
// },
// };
// </script>

// <style scoped>
// .node {
// transition: opacity 0.3s, filter 0.3s;
// }

// .node-text {
// transition: opacity 0.3s, filter 0.3s;
// fill: white;  /* Ensure text color is white here */
// }

// .link {
// transition: opacity 0.3s;
// }
// </style>


Node Name Changes:

Node 1 → Basic ROS2
Node 2 → Intermediate ROS2
Node 3 → 0. Foundations
Node 4 → Navigation ROS2
Node 5 → Manipulation




"nodes": [
    {
      "name": "Basic ROS2",
      "subnodes": [
        { "name": "Basic Rust" },
        { "name": "TF ROS2" },
        { "name": "URDF Robot Modeling ROS2" },
        { "name": "Basic C++" }
      ]
    },
    {
      "name": "Intermediate ROS2",
      "subnodes": [
        { "name": "ROS2 Control" },
        { "name": "ROS2 C++" },
        { "name": "ROS2 Python" },
        { "name": "Advanced C++" }
      ]
    },
    {
      "name": "0. Foundations",
      "subnodes": [
        { "name": "Linux for Robotics" },
        { "name": "Simulations" },
        { "name": "ROS Basics" },
        { "name": "Basics of Robotics" }
      ]
    },
    {
      "name": "Navigation ROS2",
      "subnodes": [
        { "name": "RAT B" },
        { "name": "NAV 2 Basics" },
        { "name": "New Advances" },
        { "name": "AWS Basics" }
      ]
    },
    {
      "name": "Manipulation",
      "subnodes": [
        { "name": "Robotic Theory" },
        { "name": "Enterprise" },
        { "name": "Web Development for Robotics" },
        { "name": "Course Product" }
      ]
    }